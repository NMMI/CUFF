C51 COMPILER V9.51   MAIN                                                                  02/13/2018 09:39:26 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -main.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP8051_Keil_951\Debug/main
                    -.lst) CD OT(2,SIZE) OJ(.\DP8051_Keil_951\Debug\main.obj)

line level    source

   1          // ----------------------------------------------------------------------------
   2          // BSD 3-Clause License
   3          
   4          // Copyright (c) 2016, qbrobotics
   5          // Copyright (c) 2017, Centro "E.Piaggio"
   6          // All rights reserved.
   7          
   8          // Redistribution and use in source and binary forms, with or without
   9          // modification, are permitted provided that the following conditions are met:
  10          
  11          // * Redistributions of source code must retain the above copyright notice, this
  12          //   list of conditions and the following disclaimer.
  13          
  14          // * Redistributions in binary form must reproduce the above copyright notice,
  15          //   this list of conditions and the following disclaimer in the documentation
  16          //   and/or other materials provided with the distribution.
  17          
  18          // * Neither the name of the copyright holder nor the names of its
  19          //   contributors may be used to endorse or promote products derived from
  20          //   this software without specific prior written permission.
  21          
  22          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23          // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24          // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25          // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26          // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27          // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28          // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29          // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30          // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31          // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32          // POSSIBILITY OF SUCH DAMAGE.
  33          // ----------------------------------------------------------------------------
  34          
  35          /**
  36          * \file         main.c
  37          *
  38          * \brief        Firmware main file.
  39          * \date         October 01, 2017
  40          * \author       _Centro "E.Piaggio"_
  41          * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42          * \copyright    (C) 2017 Centro "E.Piaggio". All rights reserved.
  43          * \mainpage     Firmware
  44          * \brief        This is the firmware of the qbcontrol main board for CUFF and Stretch Pro haptic feedback 
             -devices.
  45          * \version      1.0
  46          *
  47          * \details      This is the firmware of the CUFF and Stretch Pro haptic feedback devices. It can control t
             -wo motors and
  48          *               read their encoders. Also can read and convert analog measurements
  49          *               connected to the PSoC microcontroller.                
  50          *
  51          */
C51 COMPILER V9.51   MAIN                                                                  02/13/2018 09:39:26 PAGE 2   

  52          
  53          // ----------------------------------------------------------------------------
  54          // This version changes:
  55          //      - not reported
  56          
  57          
  58          //=================================================================     includes
  59          
  60          #include <device.h>
  61          #include <globals.h> // ALL GLOBAL DEFINITIONS, STRUCTURES AND MACROS HERE
  62          #include <interruptions.h>
  63          #include <command_processing.h>
  64          
  65          //==============================================================================
  66          //                                                                 MAIN FUNCTION
  67          //==============================================================================
  68          
  69          int main() {
  70   1          
  71   1          // Iterator
  72   1          uint8 i;         
  73   1          
  74   1          // Variable declarations for DMA 
  75   1          
  76   1          uint8 DMA_Chan;
  77   1          uint8 DMA_TD[1];
  78   1      
  79   1          //================================     initializations - psoc and components
  80   1      
  81   1          // EEPROM
  82   1      
  83   1          EEPROM_Start();
  84   1          memRecall();                                        // recall configuration
  85   1      
  86   1          // FTDI chip enable
  87   1      
  88   1          CyDelay(100);
  89   1          FTDI_ENABLE_REG_Write(0x01);
  90   1          
  91   1          // RS485
  92   1      
  93   1          UART_RS485_Stop();                                  // stop UART
  94   1          UART_RS485_Start();                                 // start UART
  95   1          UART_RS485_Init();
  96   1      
  97   1          UART_RS485_ClearRxBuffer();
  98   1          UART_RS485_ClearTxBuffer();
  99   1      
 100   1          ISR_RS485_RX_StartEx(ISR_RS485_RX_ExInterrupt);     // RS485 isr function
 101   1          
 102   1          // WATCHDOG
 103   1          
 104   1          WATCHDOG_COUNTER_Start();
 105   1          
 106   1          ISR_WATCHDOG_StartEx(ISR_WATCHDOG_Handler);         // WATCHDOG isr function    
 107   1      
 108   1          // PWM
 109   1      
 110   1          PWM_MOTORS_Start();
 111   1          PWM_MOTORS_WriteCompare1(0);
 112   1          PWM_MOTORS_WriteCompare2(0);
 113   1          MOTOR_DIR_Write(0);
C51 COMPILER V9.51   MAIN                                                                  02/13/2018 09:39:26 PAGE 3   

 114   1          MOTOR_ON_OFF_Write(0x00);
 115   1      
 116   1      
 117   1          // SSI encoder initializations
 118   1      
 119   1          COUNTER_ENC_Start();
 120   1          SHIFTREG_ENC_1_Start();
 121   1          SHIFTREG_ENC_2_Start();
 122   1          //SHIFTREG_ENC_3_Start();
 123   1          
 124   1          #if NUM_OF_SENSORS == 4
                      SHIFTREG_ENC_4_Start();
                  #endif
 127   1      
 128   1      
 129   1          // ADC
 130   1      
 131   1          ADC_Start();                                        // start ADC
 132   1          ADC_SOC_Write(0x01);                                // Force first read cycle
 133   1         
 134   1          // DMA
 135   1          DMA_Chan = DMA_DmaInitialize(DMA_BYTES_PER_BURST, DMA_REQUEST_PER_BURST, HI16(DMA_SRC_BASE), HI16(DMA_
             -DST_BASE));
 136   1          DMA_TD[0] = CyDmaTdAllocate();                                                                        
             -  // Allocate TD
 137   1          CyDmaTdSetConfiguration(DMA_TD[0], 2 * 3, DMA_TD[0], TD_SWAP_EN | DMA__TD_TERMOUT_EN | TD_INC_DST_ADR)
             -; // DMA Configurations
 138   1          CyDmaTdSetAddress(DMA_TD[0], LO16((uint32)ADC_DEC_SAMP_PTR), LO16((uint32)ADC_buf));                  
             -  // Set Register Address
 139   1          CyDmaChSetInitialTd(DMA_Chan, DMA_TD[0]);                                                             
             -  // Initialize Channel
 140   1          
 141   1          CyDmaChEnable(DMA_Chan, 1);                                                                           
             -  // Enable DMA
 142   1      
 143   1          RS485_CTS_Write(0);                                 // Clear To Send on RS485
 144   1      
 145   1          // TIMER
 146   1      
 147   1          MY_TIMER_Start();           
 148   1          PACER_TIMER_Start();
 149   1      
 150   1          CYGlobalIntEnable;                                  // enable interrupts
 151   1      
 152   1          //====================================     initializations - clean variables
 153   1      
 154   1          CyDelay(10);                                        // Wait for encoders to have a valid value
 155   1      
 156   1          //---------------------------------------------------  Initialize referiment structure
 157   1          for (i = NUM_OF_MOTORS; i--;) 
 158   1              g_ref.pos[i] = 0;
 159   1      
 160   1          //---------------------------------------------------  Initialize measurement structure
 161   1          for (i = NUM_OF_SENSORS; i--;) { 
 162   2              g_meas.pos[i] = 0;
 163   2              g_meas.rot[i] = 0;
 164   2          }
 165   1         
 166   1         
 167   1      
 168   1          g_ref.onoff = c_mem.activ;                          // Initalize Activation
 169   1      
C51 COMPILER V9.51   MAIN                                                                  02/13/2018 09:39:26 PAGE 4   

 170   1          //------------------------------------------------- Initialize packge on receive from RS485
 171   1          g_rx.length = 0;
 172   1          g_rx.ready  = 0;
 173   1      
 174   1           // Zero position initialization for cuff device
 175   1          g_mem.m_off[0] = g_mem.m_off[1] = 0;
 176   1          if ( memStore(0) )
 177   1              sendAcknowledgment(ACK_OK);
 178   1          else
 179   1              sendAcknowledgment(ACK_ERROR);
 180   1      
 181   1          for (i = 0; i< NUM_OF_SENSORS; i++) {
 182   2              encoder_reading(i, TRUE);
 183   2              g_mem.m_off[i] = -g_meas.pos[i];
 184   2          }
 185   1      
 186   1          if ( memStore(0) )
 187   1              sendAcknowledgment(ACK_OK);
 188   1          else
 189   1              sendAcknowledgment(ACK_ERROR);
 190   1          
 191   1          g_refNew = g_ref;                                   // Initialize k+1 measurements structure
 192   1          
 193   1          MOTOR_ON_OFF_Write(g_ref.onoff);                    // Activating motors
 194   1          
 195   1          dev_pwm_limit = 0;                                  // Init PWM limit
 196   1          tension_valid = FALSE;                              // Init tension_valid BIT
 197   1      
 198   1          cuff_flag_force = c_mem.cuff_activation_flag_force;             // If cuff startup is active, activate
             - the device
 199   1          cuff_flag_proprio = c_mem.cuff_activation_flag_proprio;             // If cuff startup is active, acti
             -vate the device
 200   1          cuff_flag_force_proprio = c_mem.cuff_activation_flag_force_proprio;             // If cuff startup is 
             -active, activate the device
 201   1          calibration_flag = 0;//STOP;
 202   1          reset_last_value_flag = 0;
 203   1          
 204   1          pretensioning_flag = FALSE;
 205   1          pret_done = FALSE;
 206   1          
 207   1          //------------------------------------------------- Initialize WDT
 208   1          // Check on disable WTD on startup
 209   1          if (g_mem.watchdog_period == 0) 
 210   1              WATCHDOG_ENABLER_Write(1);                      // Disabled
 211   1          else
 212   1              WATCHDOG_ENABLER_Write(0);                      // Enabled
 213   1              
 214   1          //============================================================     main loop
 215   1      
 216   1          for(;;)
 217   1          {
 218   2              // Put the FF reset pin to LOW
 219   2              RESET_FF_Write(0x00);
 220   2      
 221   2              // Call function scheduler
 222   2              function_scheduler();
 223   2      
 224   2              //  Wait until the FF is set to 1
 225   2              while(FF_STATUS_Read() == 0){
 226   3                  // On interrupt from RS485
 227   3                  if (interrupt_flag){
 228   4                      // Reset WDT
C51 COMPILER V9.51   MAIN                                                                  02/13/2018 09:39:26 PAGE 5   

 229   4                      WATCHDOG_REFRESH_Write(0x01);
 230   4                      // Reset flags
 231   4                      interrupt_flag = FALSE;
 232   4                      watchdog_flag = FALSE;
 233   4                      // Manage Interrupt on rs485
 234   4                      interrupt_manager();
 235   4                  }
 236   3                  // On interrupt from WDT
 237   3                  else { 
 238   4                      if (watchdog_flag){
 239   5                          // Reset WDT
 240   5                          WATCHDOG_REFRESH_Write(0x01);
 241   5                          // Disactivate motors
 242   5                          g_refNew.onoff = 0x00;
 243   5                      }
 244   4                  }
 245   3              };
 246   2      
 247   2              // Command a FF reset
 248   2              RESET_FF_Write(0x01);
 249   2      
 250   2              // Wait for FF to be reset
 251   2              while(FF_STATUS_Read() == 1);
 252   2      
 253   2              if(UART_RS485_ReadRxStatus() & UART_RS485_RX_STS_SOFT_BUFF_OVER)
 254   2                  UART_RS485_ClearRxBuffer();
 255   2          }
 256   1          return 0;
 257   1      }
 258          
 259          /* [] END OF FILE */
C51 COMPILER V9.51   MAIN                                                                  02/13/2018 09:39:26 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 83
0000 120000      E     LCALL   EEPROM_Start
                                           ; SOURCE LINE # 84
0003 120000      E     LCALL   memRecall
                                           ; SOURCE LINE # 88
0006 7F64              MOV     R7,#064H
0008 7E00              MOV     R6,#00H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 89
0011 7F01              MOV     R7,#01H
0013 120000      E     LCALL   _FTDI_ENABLE_REG_Write
                                           ; SOURCE LINE # 93
0016 120000      E     LCALL   UART_RS485_Stop
                                           ; SOURCE LINE # 94
0019 120000      E     LCALL   UART_RS485_Start
                                           ; SOURCE LINE # 95
001C 120000      E     LCALL   UART_RS485_Init
                                           ; SOURCE LINE # 97
001F 120000      E     LCALL   UART_RS485_ClearRxBuffer
                                           ; SOURCE LINE # 98
0022 120000      E     LCALL   UART_RS485_ClearTxBuffer
                                           ; SOURCE LINE # 100
0025 7E00        E     MOV     R6,#HIGH ISR_RS485_RX_ExInterrupt
0027 7F00        E     MOV     R7,#LOW ISR_RS485_RX_ExInterrupt
0029 120000      E     LCALL   _ISR_RS485_RX_StartEx
                                           ; SOURCE LINE # 104
002C 120000      E     LCALL   WATCHDOG_COUNTER_Start
                                           ; SOURCE LINE # 106
002F 7E00        E     MOV     R6,#HIGH ISR_WATCHDOG_Handler
0031 7F00        E     MOV     R7,#LOW ISR_WATCHDOG_Handler
0033 120000      E     LCALL   _ISR_WATCHDOG_StartEx
                                           ; SOURCE LINE # 110
0036 120000      E     LCALL   PWM_MOTORS_Start
                                           ; SOURCE LINE # 111
0039 7F00              MOV     R7,#00H
003B 120000      E     LCALL   _PWM_MOTORS_WriteCompare1
                                           ; SOURCE LINE # 112
003E 7F00              MOV     R7,#00H
0040 120000      E     LCALL   _PWM_MOTORS_WriteCompare2
                                           ; SOURCE LINE # 113
0043 7F00              MOV     R7,#00H
0045 120000      E     LCALL   _MOTOR_DIR_Write
                                           ; SOURCE LINE # 114
0048 7F00              MOV     R7,#00H
004A 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 119
004D 120000      E     LCALL   COUNTER_ENC_Start
                                           ; SOURCE LINE # 120
0050 120000      E     LCALL   SHIFTREG_ENC_1_Start
                                           ; SOURCE LINE # 121
0053 120000      E     LCALL   SHIFTREG_ENC_2_Start
                                           ; SOURCE LINE # 131
0056 120000      E     LCALL   ADC_Start
                                           ; SOURCE LINE # 132
0059 7F01              MOV     R7,#01H
C51 COMPILER V9.51   MAIN                                                                  02/13/2018 09:39:26 PAGE 7   

005B 120000      E     LCALL   _ADC_SOC_Write
                                           ; SOURCE LINE # 135
005E 900000      E     MOV     DPTR,#?_DMA_DmaInitialize?BYTE+04H
0061 E4                CLR     A
0062 F0                MOVX    @DPTR,A
0063 A3                INC     DPTR
0064 E4                CLR     A
0065 F0                MOVX    @DPTR,A
0066 7B00              MOV     R3,#00H
0068 7A00              MOV     R2,#00H
006A 7D01              MOV     R5,#01H
006C 7F02              MOV     R7,#02H
006E 120000      E     LCALL   _DMA_DmaInitialize
0071 900000      R     MOV     DPTR,#DMA_Chan
0074 EF                MOV     A,R7
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
0076 120000      E     LCALL   CyDmaTdAllocate
0079 900000      R     MOV     DPTR,#DMA_TD
007C EF                MOV     A,R7
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
007E 900000      R     MOV     DPTR,#DMA_TD
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 900000      R     MOV     DPTR,#DMA_TD
0086 E0                MOVX    A,@DPTR
0087 FB                MOV     R3,A
0088 900000      E     MOV     DPTR,#?_CyDmaTdSetConfiguration?BYTE+04H
008B 7486              MOV     A,#086H
008D F0                MOVX    @DPTR,A
008E 7D06              MOV     R5,#06H
0090 7C00              MOV     R4,#00H
0092 120000      E     LCALL   _CyDmaTdSetConfiguration
                                           ; SOURCE LINE # 138
0095 900000      R     MOV     DPTR,#DMA_TD
0098 E0                MOVX    A,@DPTR
0099 FF                MOV     R7,A
009A C007              PUSH    AR7
009C 7B01              MOV     R3,#01H
009E 7A00        E     MOV     R2,#HIGH ADC_buf
00A0 7900        E     MOV     R1,#LOW ADC_buf
00A2 AF01              MOV     R7,AR1
00A4 AE02              MOV     R6,AR2
00A6 AD03              MOV     R5,AR3
00A8 7C00              MOV     R4,#00H
00AA EF                MOV     A,R7
00AB 54FF              ANL     A,#0FFH
00AD FF                MOV     R7,A
00AE EE                MOV     A,R6
00AF 54FF              ANL     A,#0FFH
00B1 FE                MOV     R6,A
00B2 ED                MOV     A,R5
00B3 5400              ANL     A,#00H
00B5 FD                MOV     R5,A
00B6 EC                MOV     A,R4
00B7 5400              ANL     A,#00H
00B9 FC                MOV     R4,A
00BA AB07              MOV     R3,AR7
00BC AA06              MOV     R2,AR6
00BE D007              POP     AR7
00C0 7D10              MOV     R5,#010H
C51 COMPILER V9.51   MAIN                                                                  02/13/2018 09:39:26 PAGE 8   

00C2 7C4E              MOV     R4,#04EH
00C4 120000      E     LCALL   _CyDmaTdSetAddress
                                           ; SOURCE LINE # 139
00C7 900000      R     MOV     DPTR,#DMA_Chan
00CA E0                MOVX    A,@DPTR
00CB FF                MOV     R7,A
00CC 900000      R     MOV     DPTR,#DMA_TD
00CF E0                MOVX    A,@DPTR
00D0 FD                MOV     R5,A
00D1 120000      E     LCALL   _CyDmaChSetInitialTd
                                           ; SOURCE LINE # 141
00D4 900000      R     MOV     DPTR,#DMA_Chan
00D7 E0                MOVX    A,@DPTR
00D8 FF                MOV     R7,A
00D9 7D01              MOV     R5,#01H
00DB 120000      E     LCALL   _CyDmaChEnable
                                           ; SOURCE LINE # 143
00DE 7F00              MOV     R7,#00H
00E0 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 147
00E3 120000      E     LCALL   MY_TIMER_Start
                                           ; SOURCE LINE # 148
00E6 120000      E     LCALL   PACER_TIMER_Start
                                           ; SOURCE LINE # 150
00E9 D2AF              SETB    EA
00EB 9044F4            MOV     DPTR,#044F4H
00EE 74FD              MOV     A,#0FDH
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
00F1 7F0A              MOV     R7,#0AH
00F3 7E00              MOV     R6,#00H
00F5 7D00              MOV     R5,#00H
00F7 7C00              MOV     R4,#00H
00F9 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 157
00FC 900000      R     MOV     DPTR,#i
00FF 7402              MOV     A,#02H
0101 F0                MOVX    @DPTR,A
0102         ?C0001:
0102 900000      R     MOV     DPTR,#i
0105 E0                MOVX    A,@DPTR
0106 FF                MOV     R7,A
0107 14                DEC     A
0108 F0                MOVX    @DPTR,A
0109 EF                MOV     A,R7
010A 6020              JZ      ?C0002
                                           ; SOURCE LINE # 158
010C 7F00              MOV     R7,#00H
010E 7E00              MOV     R6,#00H
0110 7D00              MOV     R5,#00H
0112 7C00              MOV     R4,#00H
0114 900000      R     MOV     DPTR,#i
0117 E0                MOVX    A,@DPTR
0118 FB                MOV     R3,A
0119 EB                MOV     A,R3
011A 25E0              ADD     A,ACC
011C 25E0              ADD     A,ACC
011E 2400        E     ADD     A,#LOW g_ref
0120 F582              MOV     DPL,A
0122 E4                CLR     A
0123 3400        E     ADDC    A,#HIGH g_ref
0125 F583              MOV     DPH,A
C51 COMPILER V9.51   MAIN                                                                  02/13/2018 09:39:26 PAGE 9   

0127 120000      E     LCALL   ?C?LSTXDATA
012A 80D6              SJMP    ?C0001
012C         ?C0002:
                                           ; SOURCE LINE # 161
012C 900000      R     MOV     DPTR,#i
012F 7402              MOV     A,#02H
0131 F0                MOVX    @DPTR,A
0132         ?C0003:
0132 900000      R     MOV     DPTR,#i
0135 E0                MOVX    A,@DPTR
0136 FF                MOV     R7,A
0137 14                DEC     A
0138 F0                MOVX    @DPTR,A
0139 EF                MOV     A,R7
013A 6031              JZ      ?C0004
                                           ; SOURCE LINE # 162
013C 7F00              MOV     R7,#00H
013E 7E00              MOV     R6,#00H
0140 7D00              MOV     R5,#00H
0142 7C00              MOV     R4,#00H
0144 900000      R     MOV     DPTR,#i
0147 E0                MOVX    A,@DPTR
0148 FB                MOV     R3,A
0149 EB                MOV     A,R3
014A 25E0              ADD     A,ACC
014C 25E0              ADD     A,ACC
014E 2400        E     ADD     A,#LOW g_meas
0150 F582              MOV     DPL,A
0152 E4                CLR     A
0153 3400        E     ADDC    A,#HIGH g_meas
0155 F583              MOV     DPH,A
0157 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 163
015A 900000      R     MOV     DPTR,#i
015D E0                MOVX    A,@DPTR
015E FF                MOV     R7,A
015F 7400        E     MOV     A,#LOW g_meas+0CH
0161 2F                ADD     A,R7
0162 F582              MOV     DPL,A
0164 E4                CLR     A
0165 3400        E     ADDC    A,#HIGH g_meas+0CH
0167 F583              MOV     DPH,A
0169 E4                CLR     A
016A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
016B 80C5              SJMP    ?C0003
016D         ?C0004:
                                           ; SOURCE LINE # 168
016D 900000      E     MOV     DPTR,#c_mem+034H
0170 E0                MOVX    A,@DPTR
0171 FF                MOV     R7,A
0172 900000      E     MOV     DPTR,#g_ref+08H
0175 EF                MOV     A,R7
0176 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
0177 900000      E     MOV     DPTR,#g_rx+080H
017A E4                CLR     A
017B F0                MOVX    @DPTR,A
017C A3                INC     DPTR
017D E4                CLR     A
017E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
C51 COMPILER V9.51   MAIN                                                                  02/13/2018 09:39:26 PAGE 10  

017F 900000      E     MOV     DPTR,#g_rx+084H
0182 E4                CLR     A
0183 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 175
0184 7F00              MOV     R7,#00H
0186 7E00              MOV     R6,#00H
0188 7D00              MOV     R5,#00H
018A 7C00              MOV     R4,#00H
018C 900000      E     MOV     DPTR,#g_mem+03DH
018F 120000      E     LCALL   ?C?LSTXDATA
0192 7F00              MOV     R7,#00H
0194 7E00              MOV     R6,#00H
0196 7D00              MOV     R5,#00H
0198 7C00              MOV     R4,#00H
019A 900000      E     MOV     DPTR,#g_mem+039H
019D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 176
01A0 7F00              MOV     R7,#00H
01A2 7E00              MOV     R6,#00H
01A4 120000      E     LCALL   _memStore
01A7 EF                MOV     A,R7
01A8 6007              JZ      ?C0005
                                           ; SOURCE LINE # 177
01AA 7F01              MOV     R7,#01H
01AC 120000      E     LCALL   _sendAcknowledgment
01AF 8005              SJMP    ?C0006
01B1         ?C0005:
                                           ; SOURCE LINE # 179
01B1 7F00              MOV     R7,#00H
01B3 120000      E     LCALL   _sendAcknowledgment
01B6         ?C0006:
                                           ; SOURCE LINE # 181
01B6 900000      R     MOV     DPTR,#i
01B9 E4                CLR     A
01BA F0                MOVX    @DPTR,A
01BB         ?C0007:
01BB 900000      R     MOV     DPTR,#i
01BE E0                MOVX    A,@DPTR
01BF FF                MOV     R7,A
01C0 EF                MOV     A,R7
01C1 C3                CLR     C
01C2 9402              SUBB    A,#02H
01C4 5041              JNC     ?C0008
                                           ; SOURCE LINE # 182
01C6 900000      R     MOV     DPTR,#i
01C9 E0                MOVX    A,@DPTR
01CA FF                MOV     R7,A
01CB 7D01              MOV     R5,#01H
01CD 120000      E     LCALL   _encoder_reading
                                           ; SOURCE LINE # 183
01D0 900000      R     MOV     DPTR,#i
01D3 E0                MOVX    A,@DPTR
01D4 FF                MOV     R7,A
01D5 EF                MOV     A,R7
01D6 25E0              ADD     A,ACC
01D8 25E0              ADD     A,ACC
01DA 2400        E     ADD     A,#LOW g_meas
01DC F582              MOV     DPL,A
01DE E4                CLR     A
01DF 3400        E     ADDC    A,#HIGH g_meas
01E1 F583              MOV     DPH,A
01E3 120000      E     LCALL   ?C?LLDXDATA
C51 COMPILER V9.51   MAIN                                                                  02/13/2018 09:39:26 PAGE 11  

01E6 120000      E     LCALL   ?C?LNEG
01E9 900000      R     MOV     DPTR,#i
01EC E0                MOVX    A,@DPTR
01ED FB                MOV     R3,A
01EE EB                MOV     A,R3
01EF 25E0              ADD     A,ACC
01F1 25E0              ADD     A,ACC
01F3 2400        E     ADD     A,#LOW g_mem+039H
01F5 F582              MOV     DPL,A
01F7 E4                CLR     A
01F8 3400        E     ADDC    A,#HIGH g_mem+039H
01FA F583              MOV     DPH,A
01FC 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 184
01FF 900000      R     MOV     DPTR,#i
0202 E0                MOVX    A,@DPTR
0203 04                INC     A
0204 F0                MOVX    @DPTR,A
0205 80B4              SJMP    ?C0007
0207         ?C0008:
                                           ; SOURCE LINE # 186
0207 7F00              MOV     R7,#00H
0209 7E00              MOV     R6,#00H
020B 120000      E     LCALL   _memStore
020E EF                MOV     A,R7
020F 6007              JZ      ?C0010
                                           ; SOURCE LINE # 187
0211 7F01              MOV     R7,#01H
0213 120000      E     LCALL   _sendAcknowledgment
0216 8005              SJMP    ?C0011
0218         ?C0010:
                                           ; SOURCE LINE # 189
0218 7F00              MOV     R7,#00H
021A 120000      E     LCALL   _sendAcknowledgment
021D         ?C0011:
                                           ; SOURCE LINE # 191
021D 7B01              MOV     R3,#01H
021F 7A00        E     MOV     R2,#HIGH g_ref
0221 7900        E     MOV     R1,#LOW g_ref
0223 C003              PUSH    AR3
0225 C002              PUSH    AR2
0227 C001              PUSH    AR1
0229 7B01              MOV     R3,#01H
022B 7A00        E     MOV     R2,#HIGH g_refNew
022D 7900        E     MOV     R1,#LOW g_refNew
022F A801              MOV     R0,AR1
0231 AC02              MOV     R4,AR2
0233 AD03              MOV     R5,AR3
0235 D001              POP     AR1
0237 D002              POP     AR2
0239 D003              POP     AR3
023B 7E00              MOV     R6,#00H
023D 7F09              MOV     R7,#09H
023F 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 193
0242 900000      E     MOV     DPTR,#g_ref+08H
0245 E0                MOVX    A,@DPTR
0246 FF                MOV     R7,A
0247 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 195
024A 900000      E     MOV     DPTR,#dev_pwm_limit
024D E4                CLR     A
C51 COMPILER V9.51   MAIN                                                                  02/13/2018 09:39:26 PAGE 12  

024E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 196
024F C200        E     CLR     tension_valid
                                           ; SOURCE LINE # 198
0251 900000      E     MOV     DPTR,#c_mem+066H
0254 E0                MOVX    A,@DPTR
0255 FF                MOV     R7,A
0256 EF                MOV     A,R7
0257 24FF              ADD     A,#0FFH
0259 9200        E     MOV     cuff_flag_force,C
                                           ; SOURCE LINE # 199
025B 900000      E     MOV     DPTR,#c_mem+06FH
025E E0                MOVX    A,@DPTR
025F FF                MOV     R7,A
0260 EF                MOV     A,R7
0261 24FF              ADD     A,#0FFH
0263 9200        E     MOV     cuff_flag_proprio,C
                                           ; SOURCE LINE # 200
0265 900000      E     MOV     DPTR,#c_mem+079H
0268 E0                MOVX    A,@DPTR
0269 FF                MOV     R7,A
026A EF                MOV     A,R7
026B 24FF              ADD     A,#0FFH
026D 9200        E     MOV     cuff_flag_force_proprio,C
                                           ; SOURCE LINE # 201
026F 900000      E     MOV     DPTR,#calibration_flag
0272 E4                CLR     A
0273 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
0274 C200        E     CLR     reset_last_value_flag
                                           ; SOURCE LINE # 204
0276 C200        E     CLR     pretensioning_flag
                                           ; SOURCE LINE # 205
0278 C200        E     CLR     pret_done
                                           ; SOURCE LINE # 209
027A 900000      E     MOV     DPTR,#g_mem+05DH
027D E0                MOVX    A,@DPTR
027E FF                MOV     R7,A
027F EF                MOV     A,R7
0280 7007              JNZ     ?C0012
                                           ; SOURCE LINE # 210
0282 7F01              MOV     R7,#01H
0284 120000      E     LCALL   _WATCHDOG_ENABLER_Write
0287 8005              SJMP    ?C0014
0289         ?C0012:
                                           ; SOURCE LINE # 212
0289 7F00              MOV     R7,#00H
028B 120000      E     LCALL   _WATCHDOG_ENABLER_Write
                                           ; SOURCE LINE # 216
028E         ?C0014:
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 219
028E 7F00              MOV     R7,#00H
0290 120000      E     LCALL   _RESET_FF_Write
                                           ; SOURCE LINE # 222
0293 120000      E     LCALL   function_scheduler
0296         ?C0016:
                                           ; SOURCE LINE # 225
0296 120000      E     LCALL   FF_STATUS_Read
0299 EF                MOV     A,R7
029A 7020              JNZ     ?C0017
                                           ; SOURCE LINE # 227
C51 COMPILER V9.51   MAIN                                                                  02/13/2018 09:39:26 PAGE 13  

029C 30000E            JNB     interrupt_flag,?C0018
                                           ; SOURCE LINE # 229
029F 7F01              MOV     R7,#01H
02A1 120000      E     LCALL   _WATCHDOG_REFRESH_Write
                                           ; SOURCE LINE # 231
02A4 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 232
02A6 C200        E     CLR     watchdog_flag
                                           ; SOURCE LINE # 234
02A8 120000      E     LCALL   interrupt_manager
                                           ; SOURCE LINE # 235
02AB 80E9              SJMP    ?C0016
02AD         ?C0018:
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
02AD 3000E6            JNB     watchdog_flag,?C0016
                                           ; SOURCE LINE # 240
02B0 7F01              MOV     R7,#01H
02B2 120000      E     LCALL   _WATCHDOG_REFRESH_Write
                                           ; SOURCE LINE # 242
02B5 900000      E     MOV     DPTR,#g_refNew+08H
02B8 E4                CLR     A
02B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
02BA 80DA              SJMP    ?C0016
02BC         ?C0017:
                                           ; SOURCE LINE # 248
02BC 7F01              MOV     R7,#01H
02BE 120000      E     LCALL   _RESET_FF_Write
02C1         ?C0021:
                                           ; SOURCE LINE # 251
02C1 120000      E     LCALL   FF_STATUS_Read
02C4 EF                MOV     A,R7
02C5 6401              XRL     A,#01H
02C7 60F8              JZ      ?C0021
02C9         ?C0022:
                                           ; SOURCE LINE # 253
02C9 120000      E     LCALL   UART_RS485_ReadRxStatus
02CC EF                MOV     A,R7
02CD 30E7BE            JNB     ACC.7,?C0014
                                           ; SOURCE LINE # 254
02D0 120000      E     LCALL   UART_RS485_ClearRxBuffer
                                           ; SOURCE LINE # 255
02D3 80B9              SJMP    ?C0014
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
02D5         ?C0024:
02D5 22                RET     
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    726    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.51   MAIN                                                                  02/13/2018 09:39:26 PAGE 14  

   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
