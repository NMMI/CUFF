C51 COMPILER V9.51   MAIN                                                                  03/27/2019 09:24:46 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -main.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDEBUG) WL(2) PR(.\DP8051_Keil_951
                    -\Release/main.lst) CD OT(8,SPEED) OJ(.\DP8051_Keil_951\Release\main.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          // ----------------------------------------------------------------------------
   2          // BSD 3-Clause License
   3          
   4          // Copyright (c) 2016, qbrobotics
   5          // Copyright (c) 2017, Centro "E.Piaggio"
   6          // All rights reserved.
   7          
   8          // Redistribution and use in source and binary forms, with or without
   9          // modification, are permitted provided that the following conditions are met:
  10          
  11          // * Redistributions of source code must retain the above copyright notice, this
  12          //   list of conditions and the following disclaimer.
  13          
  14          // * Redistributions in binary form must reproduce the above copyright notice,
  15          //   this list of conditions and the following disclaimer in the documentation
  16          //   and/or other materials provided with the distribution.
  17          
  18          // * Neither the name of the copyright holder nor the names of its
  19          //   contributors may be used to endorse or promote products derived from
  20          //   this software without specific prior written permission.
  21          
  22          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23          // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24          // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25          // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26          // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27          // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28          // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29          // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30          // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31          // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32          // POSSIBILITY OF SUCH DAMAGE.
  33          // ----------------------------------------------------------------------------
  34          
  35          /**
  36          * \file         main.c
  37          *
  38          * \brief        Firmware main file.
  39          * \date         October 01, 2017
  40          * \author       _Centro "E.Piaggio"_
  41          * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42          * \copyright    (C) 2017 Centro "E.Piaggio". All rights reserved.
  43          * \mainpage     Firmware
  44          * \brief        This is the firmware of the qbcontrol main board for CUFF and Stretch Pro haptic feedback 
             -devices.
  45          * \version      1.0
  46          *
  47          * \details      This is the firmware of the CUFF and Stretch Pro haptic feedback devices. It can control t
             -wo motors and
  48          *               read their encoders. Also can read and convert analog measurements
  49          *               connected to the PSoC microcontroller.                
  50          *
C51 COMPILER V9.51   MAIN                                                                  03/27/2019 09:24:46 PAGE 2   

  51          */
  52          
  53          // ----------------------------------------------------------------------------
  54          // This version changes:
  55          //      - not reported
  56          
  57          
  58          //=================================================================     includes
  59          
  60          #include <device.h>
  61          #include <globals.h> // ALL GLOBAL DEFINITIONS, STRUCTURES AND MACROS HERE
  62          #include <interruptions.h>
  63          #include <command_processing.h>
  64          
  65          //==============================================================================
  66          //                                                                 MAIN FUNCTION
  67          //==============================================================================
  68          
  69          int main() {
  70   1          
  71   1          // Iterator
  72   1          uint8 i;         
  73   1          
  74   1          // Variable declarations for DMA 
  75   1          
  76   1          uint8 DMA_Chan;
  77   1          uint8 DMA_TD[1];
  78   1      
  79   1          //================================     initializations - psoc and components
  80   1      
  81   1          // EEPROM
  82   1      
  83   1          EEPROM_Start();
  84   1          memRecall();                                        // recall configuration
  85   1      
  86   1          // FTDI chip enable
  87   1      
  88   1          CyDelay(100);
  89   1          FTDI_ENABLE_REG_Write(0x01);
  90   1          
  91   1          // RS485
  92   1      
  93   1          UART_RS485_Stop();                                  // stop UART
  94   1          UART_RS485_Start();                                 // start UART
  95   1          UART_RS485_Init();
  96   1      
  97   1          UART_RS485_ClearRxBuffer();
  98   1          UART_RS485_ClearTxBuffer();
  99   1      
 100   1          ISR_RS485_RX_StartEx(ISR_RS485_RX_ExInterrupt);     // RS485 isr function
 101   1          
 102   1          // WATCHDOG
 103   1          
 104   1          WATCHDOG_COUNTER_Start();
 105   1          
 106   1          ISR_WATCHDOG_StartEx(ISR_WATCHDOG_Handler);         // WATCHDOG isr function    
 107   1      
 108   1          // PWM
 109   1      
 110   1          PWM_MOTORS_Start();
 111   1          PWM_MOTORS_WriteCompare1(0);
 112   1          PWM_MOTORS_WriteCompare2(0);
C51 COMPILER V9.51   MAIN                                                                  03/27/2019 09:24:46 PAGE 3   

 113   1          MOTOR_DIR_Write(0);
 114   1          MOTOR_ON_OFF_Write(0x00);
 115   1      
 116   1      
 117   1          // SSI encoder initializations
 118   1      
 119   1          COUNTER_ENC_Start();
 120   1          SHIFTREG_ENC_1_Start();
 121   1          SHIFTREG_ENC_2_Start();
 122   1          //SHIFTREG_ENC_3_Start();
 123   1          
 124   1          #if NUM_OF_SENSORS == 4
                      SHIFTREG_ENC_4_Start();
                  #endif
 127   1      
 128   1      
 129   1          // ADC
 130   1      
 131   1          ADC_Start();                                        // start ADC
 132   1          ADC_SOC_Write(0x01);                                // Force first read cycle
 133   1         
 134   1          // DMA
 135   1          DMA_Chan = DMA_DmaInitialize(DMA_BYTES_PER_BURST, DMA_REQUEST_PER_BURST, HI16(DMA_SRC_BASE), HI16(DMA_
             -DST_BASE));
 136   1          DMA_TD[0] = CyDmaTdAllocate();                                                                        
             -  // Allocate TD
 137   1          CyDmaTdSetConfiguration(DMA_TD[0], 2 * 3, DMA_TD[0], TD_SWAP_EN | DMA__TD_TERMOUT_EN | TD_INC_DST_ADR)
             -; // DMA Configurations
 138   1          CyDmaTdSetAddress(DMA_TD[0], LO16((uint32)ADC_DEC_SAMP_PTR), LO16((uint32)ADC_buf));                  
             -  // Set Register Address
 139   1          CyDmaChSetInitialTd(DMA_Chan, DMA_TD[0]);                                                             
             -  // Initialize Channel
 140   1          
 141   1          CyDmaChEnable(DMA_Chan, 1);                                                                           
             -  // Enable DMA
 142   1      
 143   1          RS485_CTS_Write(0);                                 // Clear To Send on RS485
 144   1      
 145   1          // TIMER
 146   1      
 147   1          MY_TIMER_Start();           
 148   1          PACER_TIMER_Start();
 149   1      
 150   1          CYGlobalIntEnable;                                  // enable interrupts
 151   1      
 152   1          //====================================     initializations - clean variables
 153   1      
 154   1          CyDelay(10);                                        // Wait for encoders to have a valid value
 155   1      
 156   1          //---------------------------------------------------  Initialize referiment structure
 157   1          for (i = NUM_OF_MOTORS; i--;) 
 158   1              g_ref.pos[i] = 0;
 159   1      
 160   1          //---------------------------------------------------  Initialize measurement structure
 161   1          for (i = NUM_OF_SENSORS; i--;) { 
 162   2              g_meas.pos[i] = 0;
 163   2              g_meas.rot[i] = 0;
 164   2          }
 165   1         
 166   1         
 167   1      
 168   1          g_ref.onoff = c_mem.activ;                          // Initalize Activation
C51 COMPILER V9.51   MAIN                                                                  03/27/2019 09:24:46 PAGE 4   

 169   1      
 170   1          //------------------------------------------------- Initialize packge on receive from RS485
 171   1          g_rx.length = 0;
 172   1          g_rx.ready  = 0;
 173   1      
 174   1           // Zero position initialization for cuff device
 175   1          g_mem.m_off[0] = g_mem.m_off[1] = 0;
 176   1          if ( memStore(0) )
 177   1              sendAcknowledgment(ACK_OK);
 178   1          else
 179   1              sendAcknowledgment(ACK_ERROR);
 180   1      
 181   1          for (i = 0; i< NUM_OF_SENSORS; i++) {
 182   2              encoder_reading(i, TRUE);
 183   2              g_mem.m_off[i] = -g_meas.pos[i];
 184   2          }
 185   1      
 186   1          if ( memStore(0) )
 187   1              sendAcknowledgment(ACK_OK);
 188   1          else
 189   1              sendAcknowledgment(ACK_ERROR);
 190   1          
 191   1          g_refNew = g_ref;                                   // Initialize k+1 measurements structure
 192   1          
 193   1          MOTOR_ON_OFF_Write(g_ref.onoff);                    // Activating motors
 194   1          
 195   1          dev_pwm_limit = 0;                                  // Init PWM limit
 196   1          tension_valid = FALSE;                              // Init tension_valid BIT
 197   1      
 198   1          cuff_flag_force = c_mem.cuff_activation_flag_force;             // If cuff startup is active, activate
             - the device
 199   1          cuff_flag_proprio = c_mem.cuff_activation_flag_proprio;             // If cuff startup is active, acti
             -vate the device
 200   1          cuff_flag_force_proprio = c_mem.cuff_activation_flag_force_proprio;             // If cuff startup is 
             -active, activate the device
 201   1          calibration_flag = 0;//STOP;
 202   1          reset_last_value_flag = 0;
 203   1          
 204   1          pretensioning_flag = FALSE;
 205   1          pret_done = FALSE;
 206   1          
 207   1          //------------------------------------------------- Initialize WDT
 208   1          // Check on disable WTD on startup
 209   1          if (g_mem.watchdog_period == 0) 
 210   1              WATCHDOG_ENABLER_Write(1);                      // Disabled
 211   1          else
 212   1              WATCHDOG_ENABLER_Write(0);                      // Enabled
 213   1              
 214   1          //============================================================     main loop
 215   1      
 216   1          for(;;)
 217   1          {
 218   2              // Put the FF reset pin to LOW
 219   2              RESET_FF_Write(0x00);
 220   2      
 221   2              // Call function scheduler
 222   2              function_scheduler();
 223   2      
 224   2              //  Wait until the FF is set to 1
 225   2              while(FF_STATUS_Read() == 0){
 226   3                  // On interrupt from RS485
 227   3                  if (interrupt_flag){
C51 COMPILER V9.51   MAIN                                                                  03/27/2019 09:24:46 PAGE 5   

 228   4                      // Reset WDT
 229   4                      WATCHDOG_REFRESH_Write(0x01);
 230   4                      // Reset flags
 231   4                      interrupt_flag = FALSE;
 232   4                      watchdog_flag = FALSE;
 233   4                      // Manage Interrupt on rs485
 234   4                      interrupt_manager();
 235   4                  }
 236   3                  // On interrupt from WDT
 237   3                  else { 
 238   4                      if (watchdog_flag){
 239   5                          // Reset WDT
 240   5                          WATCHDOG_REFRESH_Write(0x01);
 241   5                          // Disactivate motors
 242   5                          g_refNew.onoff = 0x00;
 243   5                      }
 244   4                  }
 245   3              };
 246   2      
 247   2              // Command a FF reset
 248   2              RESET_FF_Write(0x01);
 249   2      
 250   2              // Wait for FF to be reset
 251   2              while(FF_STATUS_Read() == 1);
 252   2      
 253   2              if(UART_RS485_ReadRxStatus() & UART_RS485_RX_STS_SOFT_BUFF_OVER)
 254   2                  UART_RS485_ClearRxBuffer();
 255   2          }
 256   1          return 0;
 257   1      }
 258          
 259          /* [] END OF FILE */
C51 COMPILER V9.51   MAIN                                                                  03/27/2019 09:24:46 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 83
0000 120000      E     LCALL   EEPROM_Start
                                           ; SOURCE LINE # 84
0003 120000      E     LCALL   memRecall
                                           ; SOURCE LINE # 88
0006 E4                CLR     A
0007 7F64              MOV     R7,#064H
0009 FE                MOV     R6,A
000A FD                MOV     R5,A
000B FC                MOV     R4,A
000C 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 89
000F 7F01              MOV     R7,#01H
0011 120000      E     LCALL   _FTDI_ENABLE_REG_Write
                                           ; SOURCE LINE # 93
0014 120000      E     LCALL   UART_RS485_Stop
                                           ; SOURCE LINE # 94
0017 120000      E     LCALL   UART_RS485_Start
                                           ; SOURCE LINE # 95
001A 120000      E     LCALL   UART_RS485_Init
                                           ; SOURCE LINE # 97
001D 120000      E     LCALL   UART_RS485_ClearRxBuffer
                                           ; SOURCE LINE # 98
0020 120000      E     LCALL   UART_RS485_ClearTxBuffer
                                           ; SOURCE LINE # 100
0023 7E00        E     MOV     R6,#HIGH ISR_RS485_RX_ExInterrupt
0025 7F00        E     MOV     R7,#LOW ISR_RS485_RX_ExInterrupt
0027 120000      E     LCALL   _ISR_RS485_RX_StartEx
                                           ; SOURCE LINE # 104
002A 120000      E     LCALL   WATCHDOG_COUNTER_Start
                                           ; SOURCE LINE # 106
002D 7E00        E     MOV     R6,#HIGH ISR_WATCHDOG_Handler
002F 7F00        E     MOV     R7,#LOW ISR_WATCHDOG_Handler
0031 120000      E     LCALL   _ISR_WATCHDOG_StartEx
                                           ; SOURCE LINE # 110
0034 120000      E     LCALL   PWM_MOTORS_Start
                                           ; SOURCE LINE # 111
0037 E4                CLR     A
0038 FF                MOV     R7,A
0039 120000      E     LCALL   _PWM_MOTORS_WriteCompare1
                                           ; SOURCE LINE # 112
003C E4                CLR     A
003D FF                MOV     R7,A
003E 120000      E     LCALL   _PWM_MOTORS_WriteCompare2
                                           ; SOURCE LINE # 113
0041 E4                CLR     A
0042 FF                MOV     R7,A
0043 120000      E     LCALL   _MOTOR_DIR_Write
                                           ; SOURCE LINE # 114
0046 E4                CLR     A
0047 FF                MOV     R7,A
0048 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 119
004B 120000      E     LCALL   COUNTER_ENC_Start
                                           ; SOURCE LINE # 120
004E 120000      E     LCALL   SHIFTREG_ENC_1_Start
                                           ; SOURCE LINE # 121
C51 COMPILER V9.51   MAIN                                                                  03/27/2019 09:24:46 PAGE 7   

0051 120000      E     LCALL   SHIFTREG_ENC_2_Start
                                           ; SOURCE LINE # 131
0054 120000      E     LCALL   ADC_Start
                                           ; SOURCE LINE # 132
0057 7F01              MOV     R7,#01H
0059 120000      E     LCALL   _ADC_SOC_Write
                                           ; SOURCE LINE # 135
005C E4                CLR     A
005D 900000      E     MOV     DPTR,#?_DMA_DmaInitialize?BYTE+04H
0060 F0                MOVX    @DPTR,A
0061 A3                INC     DPTR
0062 F0                MOVX    @DPTR,A
0063 FB                MOV     R3,A
0064 FA                MOV     R2,A
0065 7D01              MOV     R5,#01H
0067 7F02              MOV     R7,#02H
0069 120000      E     LCALL   _DMA_DmaInitialize
006C 900000      R     MOV     DPTR,#DMA_Chan
006F EF                MOV     A,R7
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
0071 120000      E     LCALL   CyDmaTdAllocate
0074 900000      R     MOV     DPTR,#DMA_TD
0077 EF                MOV     A,R7
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
0079 E0                MOVX    A,@DPTR
007A FB                MOV     R3,A
007B FF                MOV     R7,A
007C 900000      E     MOV     DPTR,#?_CyDmaTdSetConfiguration?BYTE+04H
007F 7486              MOV     A,#086H
0081 F0                MOVX    @DPTR,A
0082 7D06              MOV     R5,#06H
0084 7C00              MOV     R4,#00H
0086 120000      E     LCALL   _CyDmaTdSetConfiguration
                                           ; SOURCE LINE # 138
0089 7B01              MOV     R3,#01H
008B 7A00        E     MOV     R2,#HIGH ADC_buf
008D 7900        E     MOV     R1,#LOW ADC_buf
008F E9                MOV     A,R1
0090 EA                MOV     A,R2
0091 E4                CLR     A
0092 AB01              MOV     R3,AR1
0094 900000      R     MOV     DPTR,#DMA_TD
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 7D10              MOV     R5,#010H
009B 7C4E              MOV     R4,#04EH
009D 120000      E     LCALL   _CyDmaTdSetAddress
                                           ; SOURCE LINE # 139
00A0 900000      R     MOV     DPTR,#DMA_Chan
00A3 E0                MOVX    A,@DPTR
00A4 FF                MOV     R7,A
00A5 A3                INC     DPTR
00A6 E0                MOVX    A,@DPTR
00A7 FD                MOV     R5,A
00A8 120000      E     LCALL   _CyDmaChSetInitialTd
                                           ; SOURCE LINE # 141
00AB 900000      R     MOV     DPTR,#DMA_Chan
00AE E0                MOVX    A,@DPTR
00AF FF                MOV     R7,A
00B0 7D01              MOV     R5,#01H
C51 COMPILER V9.51   MAIN                                                                  03/27/2019 09:24:46 PAGE 8   

00B2 120000      E     LCALL   _CyDmaChEnable
                                           ; SOURCE LINE # 143
00B5 E4                CLR     A
00B6 FF                MOV     R7,A
00B7 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 147
00BA 120000      E     LCALL   MY_TIMER_Start
                                           ; SOURCE LINE # 148
00BD 120000      E     LCALL   PACER_TIMER_Start
                                           ; SOURCE LINE # 150
00C0 D2AF              SETB    EA
00C2 9044F4            MOV     DPTR,#044F4H
00C5 74FD              MOV     A,#0FDH
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
00C8 E4                CLR     A
00C9 7F0A              MOV     R7,#0AH
00CB FE                MOV     R6,A
00CC FD                MOV     R5,A
00CD FC                MOV     R4,A
00CE 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 157
00D1 900000      R     MOV     DPTR,#i
00D4 7402              MOV     A,#02H
00D6 F0                MOVX    @DPTR,A
00D7         ?C0001:
00D7 900000      R     MOV     DPTR,#i
00DA E0                MOVX    A,@DPTR
00DB FF                MOV     R7,A
00DC 14                DEC     A
00DD F0                MOVX    @DPTR,A
00DE EF                MOV     A,R7
00DF 6018              JZ      ?C0002
                                           ; SOURCE LINE # 158
00E1 E4                CLR     A
00E2 FF                MOV     R7,A
00E3 FE                MOV     R6,A
00E4 FD                MOV     R5,A
00E5 FC                MOV     R4,A
00E6 E0                MOVX    A,@DPTR
00E7 25E0              ADD     A,ACC
00E9 25E0              ADD     A,ACC
00EB 2400        E     ADD     A,#LOW g_ref
00ED F582              MOV     DPL,A
00EF E4                CLR     A
00F0 3400        E     ADDC    A,#HIGH g_ref
00F2 F583              MOV     DPH,A
00F4 120000      E     LCALL   ?C?LSTXDATA
00F7 80DE              SJMP    ?C0001
00F9         ?C0002:
                                           ; SOURCE LINE # 161
00F9 900000      R     MOV     DPTR,#i
00FC 7403              MOV     A,#03H
00FE F0                MOVX    @DPTR,A
00FF         ?C0003:
00FF 900000      R     MOV     DPTR,#i
0102 E0                MOVX    A,@DPTR
0103 FF                MOV     R7,A
0104 14                DEC     A
0105 F0                MOVX    @DPTR,A
0106 EF                MOV     A,R7
0107 6025              JZ      ?C0004
C51 COMPILER V9.51   MAIN                                                                  03/27/2019 09:24:46 PAGE 9   

                                           ; SOURCE LINE # 162
0109 E4                CLR     A
010A FF                MOV     R7,A
010B FE                MOV     R6,A
010C FD                MOV     R5,A
010D FC                MOV     R4,A
010E E0                MOVX    A,@DPTR
010F FB                MOV     R3,A
0110 25E0              ADD     A,ACC
0112 25E0              ADD     A,ACC
0114 2400        E     ADD     A,#LOW g_meas
0116 F582              MOV     DPL,A
0118 E4                CLR     A
0119 3400        E     ADDC    A,#HIGH g_meas
011B F583              MOV     DPH,A
011D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 163
0120 7400        E     MOV     A,#LOW g_meas+010H
0122 2B                ADD     A,R3
0123 F582              MOV     DPL,A
0125 E4                CLR     A
0126 3400        E     ADDC    A,#HIGH g_meas+010H
0128 F583              MOV     DPH,A
012A E4                CLR     A
012B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
012C 80D1              SJMP    ?C0003
012E         ?C0004:
                                           ; SOURCE LINE # 168
012E 900000      E     MOV     DPTR,#c_mem+034H
0131 E0                MOVX    A,@DPTR
0132 900000      E     MOV     DPTR,#g_ref+08H
0135 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
0136 E4                CLR     A
0137 900000      E     MOV     DPTR,#g_rx+080H
013A F0                MOVX    @DPTR,A
013B A3                INC     DPTR
013C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
013D 900000      E     MOV     DPTR,#g_rx+084H
0140 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 175
0141 FF                MOV     R7,A
0142 FE                MOV     R6,A
0143 FD                MOV     R5,A
0144 FC                MOV     R4,A
0145 900000      E     MOV     DPTR,#g_mem+03EH
0148 120000      E     LCALL   ?C?LSTXDATA
014B E4                CLR     A
014C FF                MOV     R7,A
014D FE                MOV     R6,A
014E FD                MOV     R5,A
014F FC                MOV     R4,A
0150 900000      E     MOV     DPTR,#g_mem+03AH
0153 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 176
0156 E4                CLR     A
0157 FF                MOV     R7,A
0158 FE                MOV     R6,A
0159 120000      E     LCALL   _memStore
015C EF                MOV     A,R7
C51 COMPILER V9.51   MAIN                                                                  03/27/2019 09:24:46 PAGE 10  

015D 6007              JZ      ?C0005
                                           ; SOURCE LINE # 177
015F 7F01              MOV     R7,#01H
0161 120000      E     LCALL   _sendAcknowledgment
0164 8005              SJMP    ?C0006
0166         ?C0005:
                                           ; SOURCE LINE # 179
0166 E4                CLR     A
0167 FF                MOV     R7,A
0168 120000      E     LCALL   _sendAcknowledgment
016B         ?C0006:
                                           ; SOURCE LINE # 181
016B E4                CLR     A
016C 900000      R     MOV     DPTR,#i
016F F0                MOVX    @DPTR,A
0170         ?C0007:
0170 900000      R     MOV     DPTR,#i
0173 E0                MOVX    A,@DPTR
0174 FF                MOV     R7,A
0175 C3                CLR     C
0176 9403              SUBB    A,#03H
0178 503E              JNC     ?C0008
                                           ; SOURCE LINE # 182
017A 7D01              MOV     R5,#01H
017C 120000      E     LCALL   _encoder_reading
                                           ; SOURCE LINE # 183
017F 900000      R     MOV     DPTR,#i
0182 E0                MOVX    A,@DPTR
0183 FB                MOV     R3,A
0184 25E0              ADD     A,ACC
0186 25E0              ADD     A,ACC
0188 2400        E     ADD     A,#LOW g_meas
018A F582              MOV     DPL,A
018C E4                CLR     A
018D 3400        E     ADDC    A,#HIGH g_meas
018F F583              MOV     DPH,A
0191 E0                MOVX    A,@DPTR
0192 FC                MOV     R4,A
0193 A3                INC     DPTR
0194 E0                MOVX    A,@DPTR
0195 FD                MOV     R5,A
0196 A3                INC     DPTR
0197 E0                MOVX    A,@DPTR
0198 FE                MOV     R6,A
0199 A3                INC     DPTR
019A E0                MOVX    A,@DPTR
019B FF                MOV     R7,A
019C 120000      E     LCALL   ?C?LNEG
019F EB                MOV     A,R3
01A0 25E0              ADD     A,ACC
01A2 25E0              ADD     A,ACC
01A4 2400        E     ADD     A,#LOW g_mem+03AH
01A6 F582              MOV     DPL,A
01A8 E4                CLR     A
01A9 3400        E     ADDC    A,#HIGH g_mem+03AH
01AB F583              MOV     DPH,A
01AD 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 184
01B0 900000      R     MOV     DPTR,#i
01B3 E0                MOVX    A,@DPTR
01B4 04                INC     A
01B5 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   MAIN                                                                  03/27/2019 09:24:46 PAGE 11  

01B6 80B8              SJMP    ?C0007
01B8         ?C0008:
                                           ; SOURCE LINE # 186
01B8 E4                CLR     A
01B9 FF                MOV     R7,A
01BA FE                MOV     R6,A
01BB 120000      E     LCALL   _memStore
01BE EF                MOV     A,R7
01BF 6007              JZ      ?C0010
                                           ; SOURCE LINE # 187
01C1 7F01              MOV     R7,#01H
01C3 120000      E     LCALL   _sendAcknowledgment
01C6 8005              SJMP    ?C0011
01C8         ?C0010:
                                           ; SOURCE LINE # 189
01C8 E4                CLR     A
01C9 FF                MOV     R7,A
01CA 120000      E     LCALL   _sendAcknowledgment
01CD         ?C0011:
                                           ; SOURCE LINE # 191
01CD 7800        E     MOV     R0,#LOW g_refNew
01CF 7C00        E     MOV     R4,#HIGH g_refNew
01D1 7D01              MOV     R5,#01H
01D3 7B01              MOV     R3,#01H
01D5 7A00        E     MOV     R2,#HIGH g_ref
01D7 7900        E     MOV     R1,#LOW g_ref
01D9 7E00              MOV     R6,#00H
01DB 7F09              MOV     R7,#09H
01DD 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 193
01E0 900000      E     MOV     DPTR,#g_ref+08H
01E3 E0                MOVX    A,@DPTR
01E4 FF                MOV     R7,A
01E5 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 195
01E8 E4                CLR     A
01E9 900000      E     MOV     DPTR,#dev_pwm_limit
01EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 196
01ED C200        E     CLR     tension_valid
                                           ; SOURCE LINE # 198
01EF 900000      E     MOV     DPTR,#c_mem+06FH
01F2 E0                MOVX    A,@DPTR
01F3 24FF              ADD     A,#0FFH
01F5 9200        E     MOV     cuff_flag_force,C
                                           ; SOURCE LINE # 199
01F7 900000      E     MOV     DPTR,#c_mem+078H
01FA E0                MOVX    A,@DPTR
01FB 24FF              ADD     A,#0FFH
01FD 9200        E     MOV     cuff_flag_proprio,C
                                           ; SOURCE LINE # 200
01FF 900000      E     MOV     DPTR,#c_mem+086H
0202 E0                MOVX    A,@DPTR
0203 24FF              ADD     A,#0FFH
0205 9200        E     MOV     cuff_flag_force_proprio,C
                                           ; SOURCE LINE # 201
0207 E4                CLR     A
0208 900000      E     MOV     DPTR,#calibration_flag
020B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
020C C200        E     CLR     reset_last_value_flag
                                           ; SOURCE LINE # 204
C51 COMPILER V9.51   MAIN                                                                  03/27/2019 09:24:46 PAGE 12  

020E C200        E     CLR     pretensioning_flag
                                           ; SOURCE LINE # 205
0210 C200        E     CLR     pret_done
                                           ; SOURCE LINE # 209
0212 900000      E     MOV     DPTR,#g_mem+066H
0215 E0                MOVX    A,@DPTR
0216 7007              JNZ     ?C0012
                                           ; SOURCE LINE # 210
0218 7F01              MOV     R7,#01H
021A 120000      E     LCALL   _WATCHDOG_ENABLER_Write
021D 8005              SJMP    ?C0014
021F         ?C0012:
                                           ; SOURCE LINE # 212
021F E4                CLR     A
0220 FF                MOV     R7,A
0221 120000      E     LCALL   _WATCHDOG_ENABLER_Write
                                           ; SOURCE LINE # 216
0224         ?C0014:
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 219
0224 E4                CLR     A
0225 FF                MOV     R7,A
0226 120000      E     LCALL   _RESET_FF_Write
                                           ; SOURCE LINE # 222
0229 120000      E     LCALL   function_scheduler
022C         ?C0016:
                                           ; SOURCE LINE # 225
022C 120000      E     LCALL   FF_STATUS_Read
022F EF                MOV     A,R7
0230 7020              JNZ     ?C0017
                                           ; SOURCE LINE # 227
0232 30000E            JNB     interrupt_flag,?C0018
                                           ; SOURCE LINE # 229
0235 7F01              MOV     R7,#01H
0237 120000      E     LCALL   _WATCHDOG_REFRESH_Write
                                           ; SOURCE LINE # 231
023A C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 232
023C C200        E     CLR     watchdog_flag
                                           ; SOURCE LINE # 234
023E 120000      E     LCALL   interrupt_manager
                                           ; SOURCE LINE # 235
0241 80E9              SJMP    ?C0016
0243         ?C0018:
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
0243 3000E6            JNB     watchdog_flag,?C0016
                                           ; SOURCE LINE # 240
0246 7F01              MOV     R7,#01H
0248 120000      E     LCALL   _WATCHDOG_REFRESH_Write
                                           ; SOURCE LINE # 242
024B E4                CLR     A
024C 900000      E     MOV     DPTR,#g_refNew+08H
024F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
0250 80DA              SJMP    ?C0016
0252         ?C0017:
                                           ; SOURCE LINE # 248
0252 7F01              MOV     R7,#01H
0254 120000      E     LCALL   _RESET_FF_Write
C51 COMPILER V9.51   MAIN                                                                  03/27/2019 09:24:46 PAGE 13  

0257         ?C0021:
                                           ; SOURCE LINE # 251
0257 120000      E     LCALL   FF_STATUS_Read
025A EF                MOV     A,R7
025B 6401              XRL     A,#01H
025D 60F8              JZ      ?C0021
025F         ?C0022:
                                           ; SOURCE LINE # 253
025F 120000      E     LCALL   UART_RS485_ReadRxStatus
0262 EF                MOV     A,R7
0263 30E7BE            JNB     ACC.7,?C0014
                                           ; SOURCE LINE # 254
0266 120000      E     LCALL   UART_RS485_ClearRxBuffer
                                           ; SOURCE LINE # 255
0269 80B9              SJMP    ?C0014
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
026B         ?C0024:
026B 22                RET     
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    620    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
